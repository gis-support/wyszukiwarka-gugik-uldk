# -*- coding: utf-8 -*-
"""
/***************************************************************************
 wyszukiwarkaDzialek
                                 A QGIS plugin
 desc
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-07-05
        git sha              : $Format:%H$
        copyright            : (C) 2018 by umcs
        email                : mail@mail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt, QVariant

from PyQt5.QtWidgets import QAction
from qgis.core import *
from qgis.gui import QgsMessageBar

from PyQt5.QtGui import *
# Initialize Qt resources from file resources.py
from .resources import *

# Import the code for the DockWidget
from .plugin_dockwidget import wyszukiwarkaDzialekDockWidget
import os.path
import json
import operator
import locale
from collections import OrderedDict
import requests
import time
from urllib.request import urlopen




class wyszukiwarkaDzialek:

    class PlotRequestError(Exception):
        pass
    class PrecinctRequestError(Exception):
        pass
    class InvalidGeomError(Exception):
        pass
    
    folder = os.path.dirname(os.path.abspath(__file__))
    path_woj = os.path.join(folder, 'woj.json')
    path_pow = os.path.join(folder, 'pow.json')
    path_gmi = os.path.join(folder, 'gmi.json')
    
    path_logo = ':/plugins/plugin/logo_thumb.png'

    dict_woj = {}
    dict_pow = {}
    dict_gmi = {}
    dict_obr = {}


    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'wyszukiwarkaDzialek_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Wyszukiwarka działek ewidencyjnych (GUGiK ULDK) - beta')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'wyszukiwarkaDzialek')
        self.toolbar.setObjectName(u'wyszukiwarkaDzialek')

        #print "** INITIALIZING wyszukiwarkaDzialek"

        self.pluginIsActive = False
        self.dockwidget = None
        


    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('wyszukiwarkaDzialek', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/plugin/logo_thumb.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Wyszukiwarka działek ewidencyjnych (GUGiK ULDK) - beta'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING wyszukiwarkaDzialek"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD wyszukiwarkaDzialek"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Wyszukiwarka działek ewidencyjnych (GUGiK ULDK) - beta'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------

    def run(self):
        
        try:
            urlopen("http://google.com")
        except:
            self.iface.messageBar().pushWarning("Ostrzeżenie!", "Brak połączenia z Internetem!")

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING wyszukiwarkaDzialek"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = wyszukiwarkaDzialekDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.RightDockWidgetArea, self.dockwidget)
            # self.dockwidget.labelLogo.setPixmap(QPixmap(self.path_logo))
            # self.dockwidget.labelLogo.setScaledContents(True)

            self.dockwidget.show()

            self.dockwidget.comBoxWoj.activated.connect(self.fillComBoxPow)
            self.dockwidget.comBoxPow.activated.connect(self.fillComBoxGmi)
            self.dockwidget.comBoxGmi.activated.connect(self.fillComBoxObr)
            self.dockwidget.comBoxObr.activated.connect(self.SetCurrentID)

            self.dockwidget.texEdDzi.textChanged.connect(self.SetCurrentID)

            self.dockwidget.comBoxWoj.activated.connect(self.argumentsFilled)
            self.dockwidget.comBoxPow.activated.connect(self.argumentsFilled)
            self.dockwidget.comBoxGmi.activated.connect(self.argumentsFilled)
            self.dockwidget.labelCurrentID.textChanged.connect(self.argumentsFilled)

            self.dockwidget.btnSearch.clicked.connect(self.wyswietlDzialke)
            self.dockwidget.btnWMS.clicked.connect(self.addWMS)

            self.dict_woj = self.jsonToDict(self.path_woj)
            self.dict_pow = self.jsonToDict(self.path_pow)
            self.dict_gmi = self.jsonToDict(self.path_gmi)
            self.fillComBoxWoj()

    def SetCurrentID(self):
        obr_id = obr_id = self.dockwidget.comBoxObr.currentText()[-14:-1]
        dzi_id = self.dockwidget.texEdDzi.text()
        identyfikator = "{}.{}".format(obr_id,dzi_id)
        self.dockwidget.labelCurrentID.setText(identyfikator)

    def fillComBoxWoj(self):
        start = time.time()
        lista = [""]
        for k,v in self.dict_woj.items():
            lista.append(v +" [{}]".format(k))
        self.dockwidget.comBoxWoj.addItems(lista)
    
    def argumentsFilled(self):
        enabled = (self.dockwidget.comBoxWoj.currentText() != "" and
                self.dockwidget.comBoxPow.currentText() != "" and
                self.dockwidget.comBoxGmi.currentText() != "" and
                self.dockwidget.comBoxObr.currentText() != "" and
                self.dockwidget.texEdDzi.text() != "") or self.dockwidget.labelCurrentID.text() != ""
        self.dockwidget.btnSearch.setEnabled(enabled)

    def fillComBoxPow(self):
        start = time.time()
        lista = [""]
        for i in range(self.dockwidget.comBoxPow.count()):
            self.dockwidget.comBoxPow.removeItem(0)
        for i in range(self.dockwidget.comBoxGmi.count()):
            self.dockwidget.comBoxGmi.removeItem(0)
        for i in range(self.dockwidget.comBoxObr.count()):
            self.dockwidget.comBoxObr.removeItem(0)
        woj_id = self.dockwidget.comBoxWoj.currentText()[-3:-1]
        for k,v in self.dict_pow.items():
            if k[0:2] == woj_id:
                lista.append(v +" [{}]".format(k))
        self.dockwidget.comBoxPow.addItems(lista)
       

    def fillComBoxGmi(self):
        start = time.time()
        lista = [""]
        for i in range(self.dockwidget.comBoxGmi.count()):
            self.dockwidget.comBoxGmi.removeItem(0)
        for i in range(self.dockwidget.comBoxObr.count()):
            self.dockwidget.comBoxObr.removeItem(0)
        pow_id = self.dockwidget.comBoxPow.currentText()[-5:-1]
        for k,v in self.dict_gmi.items():
            if k[0:4] == pow_id:
                lista.append(v +" [{}]".format(k))
        self.dockwidget.comBoxGmi.addItems(lista)
        

    def fillComBoxObr(self):
        lista = [""]
        for i in range(self.dockwidget.comBoxObr.count()):
            self.dockwidget.comBoxObr.removeItem(0)
        gmi_id = self.dockwidget.comBoxGmi.currentText()[-8:-2]
        try:
            self.dict_obr = self.pobierzSlownikObrebow(gmi_id)
        except self.PrecinctRequestError as e:
            self.iface.messageBar().pushCritical("Błąd!", str(e))
        for k,v in self.dict_obr.items():
            lista.append((k +" [{}]".format(v)))
        self.dockwidget.comBoxObr.addItems(lista)
        

    def wyswietlDzialke(self):
        obr_id = self.dockwidget.comBoxObr.currentText()[-14:-1]
        dzi_id = self.dockwidget.texEdDzi.text()
        identyfikator = self.dockwidget.labelCurrentID.text()
        try:
            wkt = self.pobierzWKT(identyfikator)
            self.dodajGeom(*wkt, identyfikator)
        except (self.PlotRequestError, self.PrecinctRequestError, self.InvalidGeomError)  as e:
            self.iface.messageBar().pushCritical("Błąd!", str(e))

    def jsonToDict(self, path):
        d = {}
        with open(path) as f:
            d = json.loads(f.read())
        #locale.setlocale(locale.LC_ALL, 'pl_PL')
        d = OrderedDict(sorted(d.items(), key=operator.itemgetter(0)))
        
        return d

    def pobierzWKT (self, identyfikator):
        zadanie = "http://uldk.gugik.gov.pl/service.php?request=dzialka&identyfikator={}&wynik=geom_wkt".format(identyfikator)
        reqG = requests.get(zadanie)
        geomS = str(reqG.content).split('\\n')
        status_code = str(reqG.text[0])
        if status_code != str(0):
            raise(self.PlotRequestError("Nie odnaleziono działki!"))
        geomWkt = geomS[1]
        return str(geomWkt), identyfikator

    def pobierzSlownikObrebow(self, nazwaGminy):
        nazwaGminy = nazwaGminy[0:6]
        zadanie = "http://uldk.gugik.gov.pl/service.php?request=obreb&jednostkaewidencyjna={}".format(nazwaGminy)
        req = requests.get(zadanie)
        req.encoding = "utf-8"
        status_code = str(req.text[0])
        if status_code != str(0):
            raise(self.PrecinctRequestError("Nie odnaleziono obrębów w gminie!"))
        listaM =[]
        listaO = []
        reqsplit = req.text.splitlines()

        licznik = 0
        for elem in reqsplit:
            if licznik > 0:
                el = elem.split('|')
                listaM.append(el[1])
                listaO.append(el[0])
            licznik += 1
        slownik = {}
        for count, elem in enumerate(listaM):
            slownik[listaM[count]] = listaO[count]
        return slownik



    def dodajGeom(self, geomEWkt, nazwaWarstwy="warstwa_wynikowa", identyfikator = "0"):
        EWkt = geomEWkt.split(";")
        Wkt, epsg = "",""
        if len(EWkt) == 1:
            Wkt = geomEWkt
            epsg = "2180"
            print("zwrócono WKT zamiast EWKT")
        else:
            Wkt = EWkt[1]
            epsg_temp = str(EWkt[0])
            epsg = str(epsg_temp[-4:])
        geom = QgsGeometry.fromWkt(Wkt)
        if geom.isGeosValid() == False:
            raise(self.InvalidGeomError("Nie udało się utworzyć geometrii!"))
        layer = QgsVectorLayer("Polygon?crs=EPSG:"+epsg, nazwaWarstwy, "memory")
        layer.startEditing()
        layer.dataProvider().addAttributes([QgsField("id", QVariant.String)])
        layer.dataProvider().addAttributes([QgsField("pow_mkw", QVariant.String)])
        feat = QgsFeature()
        feat.setGeometry(geom)
        area = geom.area()
        feat.setAttributes([identyfikator, area])
        layer.dataProvider().addFeature(feat)
        layer.commitChanges()
        QgsProject.instance().addMapLayer(layer)
        #styl
        myRenderer  = layer.renderer()
        mySymbol1 = QgsFillSymbol.createSimple({'color':'white', 'color_border':'red','width_border':'2'})
        myRenderer.setSymbol(mySymbol1)
        layer.setOpacity(0.35)
        layer.triggerRepaint()
        self.iface.zoomToActiveLayer()

    def addWMS(self):
        if not QgsProject.instance().mapLayersByName(
                'Dzialki ULDK'):
            url = ("contextualWMSLegend=0&"
                   "crs=EPSG:2180&"
                   "dpiMode=7&"
                   "featureCount=10&"
                   "format=image/png&"
                   "layers=dzialki&layers=numery_dzialek&"
                   "styles=&styles=&"
                   "version=1.1.1&"
                   "url=http://integracja.gugik.gov.pl/cgi-bin/KrajowaIntegracjaEwidencjiGruntow")
            layer = QgsRasterLayer(url, 'Dzialki ULDK', 'wms')
            QgsProject.instance().addMapLayer(layer)
        else:
            pass

